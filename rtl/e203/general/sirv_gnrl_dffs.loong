 /*
 Copyright 2017 Silicon Integrated Microelectronics, Inc.
 Copyright 2018 Loongson Technology.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */



//=====================================================================
//--        _______   ___
//--       (   ____/ /__/
//--        \ \     __
//--     ____\ \   / /
//--    /_______\ /_/   MICROELECTRONICS
//--
//=====================================================================
//
// Designer   : Bob Hu
// Loonger    : Leslie Zhai <lesliezhai@llvm.org.cn>
//
// Description:
//  All of the general DFF and Latch modules
//
// ====================================================================

#include <cstddef>


//
// ===========================================================================
//
// Description:
//  Verilog module sirv_gnrl DFF with Load-enable and Reset
//  Default reset value is 1
//
// ===========================================================================

template<size_t DW = 32> hmodule sirv_gnrl_dfflrs {
public:
  sirv_gnrl_dfflrs(
  input               lden, 
  input               dnxt[DW - 1],
  output              qout[DW - 1],

  input               clk,
  input               rst_n) {

reg qout_r[DW - 1];

__always(posedge clk or negedge rst_n) {
  if (rst_n == 1'b0)
    __nonblock_assign(qout_r = {DW{1'b1}});
  else if (lden == 1'b1)
    __nonblock_assign(/*qout_r = #1 dnxt*/); // FIXME: Unimplemented
}

__assign(qout = qout_r);

#ifndef FPGA_SOURCE//{
#ifndef DISABLE_SV_ASSERTION//{
//synopsys translate_off
// FIXME: Unimplemented
#if 0
sirv_gnrl_xchecker # (
  .DW(1)
) sirv_gnrl_xchecker(
  .i_dat(lden),
  .clk  (clk)
);
#endif
//synopsys translate_on
#endif//}
#endif//}
}
};

// ===========================================================================
//
// Description:
//  Verilog module sirv_gnrl DFF with Load-enable and Reset
//  Default reset value is 0
//
// ===========================================================================

template<size_t DW = 32> hmodule sirv_gnrl_dfflr {
public:
  sirv_gnrl_dfflr(
  input               lden, 
  input               dnxt[DW - 1],
  output              qout[DW - 1],

  input               clk,
  input               rst_n) {

reg qout_r[DW - 1];

__always(posedge clk or negedge rst_n) {
/*begin : DFFLR_PROC*/ // FIXME: Unimplemented
  if (rst_n == 1'b0)
    __nonblock_assign(qout_r = {DW{1'b0}});
  else if (lden == 1'b1)
    __nonblock_assign(/*qout_r = #1 dnxt*/); // FIXME: Unimplemented
}

__assign(qout = qout_r);

#ifndef FPGA_SOURCE//{
#ifndef DISABLE_SV_ASSERTION//{
//synopsys translate_off
// FIXME: Unimplemented
#if 0
sirv_gnrl_xchecker # (
  .DW(1)
) sirv_gnrl_xchecker(
  .i_dat(lden),
  .clk  (clk)
);
#endif
//synopsys translate_on
#endif//}
#endif//}
}
}; 

// ===========================================================================
//
// Description:
//  Verilog module sirv_gnrl DFF with Load-enable, no reset 
//
// ===========================================================================

template<size_t DW = 32> hmodule sirv_gnrl_dffl {
public:
  sirv_gnrl_dffl(
  input               lden, 
  input               dnxt[DW - 1],
  output              qout[DW - 1],

  input               clk) {

reg qout_r[DW - 1];

__always(posedge clk) {
//begin : DFFL_PROC
  if (lden == 1'b1)
    __nonblock_assign(/*qout_r = #1 dnxt*/);
}

__assign(qout = qout_r);

#ifndef FPGA_SOURCE//{
#ifndef DISABLE_SV_ASSERTION//{
//synopsys translate_off
#if 0
sirv_gnrl_xchecker # (
  .DW(1)
) sirv_gnrl_xchecker(
  .i_dat(lden),
  .clk  (clk)
);
#endif
//synopsys translate_on
#endif//}
#endif//}
}
}; 

// ===========================================================================
//
// Description:
//  Verilog module sirv_gnrl DFF with Reset, no load-enable
//  Default reset value is 1
//
// ===========================================================================

template<size_t DW = 32> hmodule sirv_gnrl_dffrs {
public:
  sirv_gnrl_dffrs(
  input               dnxt[DW - 1],
  output              qout[DW - 1],

  input               clk,
  input               rst_n) {

reg qout_r[DW - 1];

__always(posedge clk or negedge rst_n) {
//begin : DFFRS_PROC
  if (rst_n == 1'b0)
    __nonblock_assign(qout_r = {DW{1'b1}});
  else                  
    __nonblock_assign(/*qout_r = #1 dnxt*/);
}

__assign(qout = qout_r);
}
};

// ===========================================================================
//
// Description:
//  Verilog module sirv_gnrl DFF with Reset, no load-enable
//  Default reset value is 0
//
// ===========================================================================

template<size_t DW = 32> hmodule sirv_gnrl_dffr {
public:
  sirv_gnrl_dffr(
  input               dnxt[DW - 1],
  output              qout[DW - 1],

  input               clk,
  input               rst_n) {

reg qout_r[DW - 1];

__always(posedge clk or negedge rst_n) {
//begin : DFFR_PROC
  if (rst_n == 1'b0)
    __nonblock_assign(qout_r = {DW{1'b0}});
  else                  
    __nonblock_assign(/*qout_r = #1 dnxt*/);
}

__assign(qout = qout_r);
}
};

// ===========================================================================
//
// Description:
//  Verilog module for general latch 
//
// ===========================================================================

template<size_t DW = 32> hmodule sirv_gnrl_ltch {
public:
  sirv_gnrl_ltch(
  //input               test_mode,
  input               lden, 
  input               dnxt[DW - 1],
  output              qout[DW - 1]) {

reg qout_r[DW - 1];

__always() {
//begin : LTCH_PROC
  if (lden == 1'b1)
    __nonblock_assign(qout_r = dnxt);
}

//assign qout = test_mode ? dnxt : qout_r;
__assign(qout = qout_r);

#ifndef FPGA_SOURCE//{
#ifndef DISABLE_SV_ASSERTION//{
//synopsys translate_off
// I do not support SystemVerilog!
//always_comb
//begin
//  CHECK_THE_X_VALUE:
//    assert (lden !== 1'bx) 
//    else $fatal ("\n Error: Oops, detected a X value!!! This should never happen. \n");
//end

//synopsys translate_on
#endif//}
#endif//}
}
};
